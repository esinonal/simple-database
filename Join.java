package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private ArrayList<Tuple> child1Tups = new ArrayList<Tuple>();
    private OpIterator child2;
    private ArrayList<Tuple> child2Tups = new ArrayList<Tuple>();
    private ArrayList<Tuple> joinedTuples = new ArrayList<Tuple>();
    private Iterator<Tuple> it;
    private TupleDesc td;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        super();
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.td = TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return this.td;
    }

    private ArrayList<Tuple> implementJoin() {
        ArrayList<Tuple> joinedList = new ArrayList<>();
        for (int i = 0; i < this.child1Tups.size(); i++) {
            Tuple tuple1 = this.child1Tups.get(i);
            for (int j = 0; j < this.child2Tups.size(); j++) {
                Tuple tuple2 = this.child2Tups.get(j);
                if (this.p.filter(tuple1, tuple2)) {
                    joinedList.add(Tuple.mergeTuples(this.td, tuple1, tuple2));
                }
            }
        }
        return joinedList;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.child1.open();
        while (this.child1.hasNext()) { this.child1Tups.add(this.child1.next()); }
        this.child2.open();
        while (this.child2.hasNext()) { this.child2Tups.add(this.child2.next()); }
        this.joinedTuples = this.implementJoin();
        this.it = this.joinedTuples.iterator();
    }

    public void close() {
        this.it = null;
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        super.open();
        this.it = this.joinedTuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (!this.open) {
            return null;
        }
        while(this.it.hasNext()) {
            return this.it.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }
}
