package simpledb;

import java.util.*;
 
/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    
    JoinPredicate p;
    OpIterator child1;
    OpIterator child2;
    private TupleDesc mergeTD;
    Tuple nextTupChild1;
    Tuple nextTupChild2;
    HashMap<Object, ArrayList<Tuple>> joinMap = new HashMap<Object, ArrayList<Tuple>>();
    transient Iterator<Tuple> listIt = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        mergeTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return mergeTD;
    }

    public String getJoinField1Name()
    {
        // some code goes here
	 	return this.child1.getTupleDesc().getFieldName(this.p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
	 	return this.child2.getTupleDesc().getFieldName(this.p.getField2());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
        child1.open();
        child2.open();
        buildMap();
    }

    public void close() {
        // some code goes here
        this.joinMap.clear();

        super.close();
        child2.close();
        child1.close();

        this.nextTupChild1 = null;
        this.nextTupChild2 = null;
        this.listIt = null;
    }
    

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	// super.rewind();
        child1.rewind();
        child2.rewind();
    }


    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null) {
        	if (listIt.hasNext()) {
        		nextTupChild1 = listIt.next();

                int tup1FieldCount = nextTupChild1.getTupleDesc().numFields();
                int tup2FieldCount = nextTupChild2.getTupleDesc().numFields();

                Tuple mergedTup = new Tuple(mergeTD);
                for (int i = 0; i < tup1FieldCount; i++)
                	mergedTup.setField(i, nextTupChild1.getField(i));
                
                for (int j = 0; j < tup2FieldCount; j++)
                	mergedTup.setField(tup1FieldCount + j, nextTupChild2.getField(j));
                
                return mergedTup;
        	}
        }

        while (child2.hasNext()) {
        	nextTupChild2 = child2.next();

            ArrayList<Tuple> tupList = joinMap.get(nextTupChild2.getField(p.getField2()));
            if (tupList == null)
                continue;
            listIt = tupList.iterator();

            nextTupChild1 = listIt.next();

            int tup1FieldCount = nextTupChild1.getTupleDesc().numFields();
            int tup2FieldCount = nextTupChild2.getTupleDesc().numFields();

            Tuple mergedTup = new Tuple(mergeTD);
            
            for (int i = 0; i < tup1FieldCount; i++)
            	mergedTup.setField(i, nextTupChild1.getField(i));
            
            for (int j = 0; j < tup2FieldCount; j++)
            	mergedTup.setField(tup1FieldCount + j, nextTupChild2.getField(j));
            
            return mergedTup;

        }

        child2.rewind();
        if (buildMap()) {
            return fetchNext();
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }


    private boolean buildMap() throws DbException, TransactionAbortedException {
    	
        int i = 0;
        
        joinMap.clear();
        
        while (child1.hasNext()) {
        	
            nextTupChild1 = child1.next();
            ArrayList<Tuple> list = joinMap.get(nextTupChild1.getField(p.getField1()));
            
            if (list == null) {
                list = new ArrayList<Tuple>();
                joinMap.put(nextTupChild1.getField(p.getField1()), list);
            }
            list.add(nextTupChild1);
            if (i == 99999) {
            	return true;
            }

        }
        if (i > 0) {
        	return true;
        }
        else {
        	return false;
        }

    }

}
